pico-8 cartridge // http://www.pico-8.com
version 27
__lua__

#include ../vec3_v3.p8

--[[

o horizontal collisions
* vertical collisions

]]

function _init()
	p1 = init_player()
end

function _update60()
	-- input bookkeeping.
	grab_inputs()

	-- movement.
	update_vx()
	move_horizontally()

	-- resolve collisions.
	handle_horiz_collisions()
end

function _draw()
	cls(1)

	-- draw map.
	-- map( celx, cely, sx, sy, celw, celh, [layer] )
	map(0, 0, 0, 0, 16, 16)

	-- draw entities.
	draw_player(p1)

	-- debug.
	print('p1.vx:' .. p1.vx)
	print('left:' ..
		tostr(is_colliding_horiz(p1.pos, p1.w, p1.h, 'left'))
	)
	print('right:' ..
		tostr(is_colliding_horiz(p1.pos, p1.w, p1.h, 'right'))
	)
end

-->8
-- draw functions.

function draw_player(p)
	local left, right, top, bottom = get_bounds(
		p.pos,
		p.w,
		p.h
	)
	rectfill(left, top, right, bottom, 7)
end

-->8
-- init functions.

function init_player()
	return {
		-- position.
		pos = vec3_new(64, 74),

		-- horizontal velocity.
		vx = 0,

		-- width.
		w = 6,

		-- height.
		h = 10,

		-- horiz speed.
		speed = 60, -- pixels per second.
	}
end

-->8
-- update functions.

function handle_horiz_collisions()
	-- handle left collision.
	local is_colliding_left, wx, resolve = is_colliding_horiz(
		p1.pos, p1.w, p1.h, 'left'
	)
	if is_colliding_left then
		-- resolve player pos.
		p1.pos.x = wx + resolve

		-- resolve player vel.
		p1.vx = 0
	end

	-- handle right collision.
	local is_colliding_right, wx, resolve = is_colliding_horiz(
		p1.pos, p1.w, p1.h, 'right'
	)
	if is_colliding_right then
		-- resolve player pos.
		p1.pos.x = wx + resolve

		-- resolve player vel.
		p1.vx = 0
	end
end

-- given the pos, w, and h of an entity,
-- determine if the entity is colliding with walls.
-- side can be 'left' or 'right'.
function is_colliding_horiz(pos, w, h, side)
	-- get the bounds of the char.
	local left, right, top, bottom, cx, cy = get_bounds(pos, w, h)
	local x
	if side=='left' then
		x = left
	elseif side=='right' then
		x = right
	else
		assert(false)
	end

	-- ensure we are always sweeping in whole number increments.
	local incr = flr(h/3)

	-- determine the value of is_colliding by sweeping.
	local is_colliding = false
	for i=-1,1 do
		-- get y test value.
		local y = cy + i*incr

		-- get sprite number in map space.
		local sprite_num = mget(x/8, y/8)

		-- get flags.
		local is_wall = fget(sprite_num, 0)

		-- if tile is a wall, there is a collision.
		if is_wall then is_colliding = true end
	end
end

function update_vx()
	local desired_vx = 0
	if i_left then desired_vx -= p1.speed end
	if i_right then desired_vx += p1.speed end
	p1.vx = damp(p1.vx, desired_vx, .01)
end

function move_horizontally()
	p1.pos.x += p1.vx * .0167
end

-->8
-- utils.

function vec3.world2screen(v)
	return v.x, v.y
end

-- get the bounds of a rectangular character,
-- while considering odd or even dimensions.
--
-- needed for fixing off-by-1 errors in collisions,
-- because collisions are done in screen space when using the map.
function get_bounds(pos, w, h)
	local left
	local right
	local top
	local bottom
	local cx = pos.x
	local cy

	if w%2==0 then
		left = pos.x - w/2
		right = pos.x + w/2 - 1
	else
		left = pos.x - flr(w/2)
		right = pos.x + flr(w/2)
	end

	top = pos.y - h + 1
	bottom = pos.y
	cy = top + flr(h/2)

	assert(left%1==0)
	assert(right%1==0)
	assert(top%1==0)
	assert(bottom%1==0)
	assert(cx%1==0)
	assert(cy%1==0)
	return left, right, top, bottom, cx, cy
end
__gfx__
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
