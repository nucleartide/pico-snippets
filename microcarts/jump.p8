pico-8 cartridge // http://www.pico-8.com
version 27
__lua__

#include ../vec3_v3.p8

--[[

o horizontal collisions
* vertical collisions

]]

function _init()
	p1 = init_player()
end

function _update60()
	-- input bookkeeping.
	grab_inputs()

	-- movement.
	update_vx()
	move_horizontally()

	-- resolve collisions.
	handle_horiz_collisions()
end

function _draw()
	cls(1)

	-- draw map.
	-- map( celx, cely, sx, sy, celw, celh, [layer] )
	map(0, 0, 0, 0, 16, 16)

	-- draw entities.
	draw_player(p1)

	-- debug.
	print('p1.vx:' .. p1.vx)
	print('left:' ..
		tostr(is_colliding_horiz(p1.pos, p1.w, p1.h, 'left'))
	)
	print('right:' ..
		tostr(is_colliding_horiz(p1.pos, p1.w, p1.h, 'right'))
	)
end

-->8
-- draw functions.

function draw_player(p)
	local sx, sy = p.pos:world2screen()
	local top = sy - p.h
	local bottom = sy
	local left = sx - p.w/2
	local right = sx + p.w/2
	rectfill(round(left), round(top), round(right), round(bottom), 7)
end

-->8
-- init functions.

function init_player()
	return {
		-- position.
		pos = vec3_new(64, 74),

		-- horizontal velocity.
		vx = 0,

		-- width.
		w = 6,

		-- height.
		h = 10,

		-- horiz speed.
		speed = 60, -- pixels per second.
	}
end

-->8
-- update functions.

function handle_horiz_collisions()
	-- handle left collision.
	local is_colliding_left, wx, resolve = is_colliding_horiz(
		p1.pos, p1.w, p1.h, 'left'
	)
	if is_colliding_left then
		-- resolve player pos.
		p1.pos.x = wx + resolve

		-- resolve player vel.
		p1.vx = 0
	end

	-- handle right collision.
	-- ...
end

-- given the pos, w, and h of an entity,
-- determine if the entity is colliding with walls.
-- side can be 'left' or 'right'.
function is_colliding_horiz(pos, w, h, side)
	-- determine x based on side.
	local x
	local resolve
	if side=='left' then
		x = pos.x - w/2
		resolve = w/2
	elseif side=='right' then
		x = pos.x + w/2
		resolve = -w/2
	else
		assert(false)
	end

	-- determine the value of is_colliding.
	local incr, is_colliding, cy = h/3, false, pos.y-h/2
	local tile_x = 0
	for y=cy-incr,cy+incr,incr do
		-- get the sprite number by using the map coords.
		local sprite_num = mget(x/8, y/8)
		printh('sprite num:' .. sprite_num)

		-- get the flags.
		local is_wall = fget(sprite_num, 0)

		-- char is colliding if tile is wall.
		if is_wall then
			is_colliding = true
			tile_x = flr(x/8)
		end
	end

	-- return result.
	if is_colliding then
		return true, tile_x*8+8, resolve
	else
		return false
	end
end

function update_vx()
	local desired_vx = 0
	if i_left then desired_vx -= p1.speed end
	if i_right then desired_vx += p1.speed end
	p1.vx = damp(p1.vx, desired_vx, .01)
end

function move_horizontally()
	p1.pos.x += p1.vx * .0167
end

-->8
-- utils.

function vec3.world2screen(v)
	return v.x, v.y
end
__gfx__
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
